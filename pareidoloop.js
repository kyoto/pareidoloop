// Generated by CoffeeScript 1.3.3
(function() {
  var Face, Quad, ShouldMove,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.rnd = function(mean, stdev) {
    return ((Math.random() * 2 - 1) + (Math.random() * 2 - 1) + (Math.random() * 2 - 1)) * stdev + mean;
  };

  window.mean = function(vals) {
    var total;
    total = 0;
    $.each(vals, function() {
      return total += this;
    });
    return total / vals.length;
  };

  window.stdev = function(vals) {
    var total, valsMean;
    if (vals.length < 2) {
      return 0;
    } else {
      valsMean = mean(vals);
      total = 0;
      $.each(vals, function() {
        return total += Math.pow(this - valsMean, 2);
      });
      return Math.sqrt(total / (vals.length - 1));
    }
  };

  ShouldMove = (function() {

    function ShouldMove() {}

    ShouldMove.simple = function(newScore, oldScore) {
      return newScore > oldScore;
    };

    ShouldMove.annealing = function(newScore, oldScore) {
      var temperature;
      if (newScore > oldScore) {
        return true;
      }
      if (newScore === oldScore) {
        return Math.random() < 0.5;
      }
      temperature = Math.max(0.01, 1 - (oldScore / this.settings.CONFIDENCE_THRESHOLD));
      return Math.random() < Math.exp((newScore - oldScore) / temperature * 5);
    };

    return ShouldMove;

  })();

  Quad = (function() {

    function Quad(origin, scale, alpha, stdDev) {
      this.origin = origin;
      this.scale = scale;
      this.alpha = alpha;
      this.points = [[rnd(-0.5, stdDev), rnd(-0.5, stdDev)], [rnd(0.5, stdDev), rnd(-0.5, stdDev)], [rnd(0.5, stdDev), rnd(0.5, stdDev)], [rnd(-0.5, stdDev), rnd(0.5, stdDev)]];
    }

    Quad.prototype.clip = function(x, min, max) {
      return Math.min(max, Math.max(min, x));
    };

    Quad.prototype.draw = function(ctx) {
      var i, _i;
      ctx.save();
      ctx.translate(this.origin[0], this.origin[1]);
      ctx.scale(this.scale, this.scale);
      ctx.beginPath();
      for (i = _i = 0; _i < 4; i = ++_i) {
        ctx.lineTo(this.points[i][0], this.points[i][1]);
      }
      ctx.closePath();
      if (this.alpha > 0) {
        ctx.fillStyle = "#ffffff";
        ctx.globalAlpha = this.alpha;
      } else {
        ctx.fillStyle = "#000000";
        ctx.globalAlpha = -this.alpha;
      }
      ctx.fill();
      return ctx.restore();
    };

    return Quad;

  })();

  window.Pareidoloop = (function() {

    Pareidoloop.prototype.settings = {};

    function Pareidoloop(canvasA, canvasB, scoreA, scoreB) {
      this.canvasA = canvasA;
      this.canvasB = canvasB;
      this.scoreA = scoreA;
      this.scoreB = scoreB;
      this.canvasOut = document.createElement("canvas");
    }

    Pareidoloop.prototype.start = function(args) {
      var _ref, _ref1, _ref10, _ref11, _ref12, _ref13, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;
      this.outputCallback = args != null ? args.outputCallback : void 0;
      this.shouldMove = (_ref = args != null ? args.shouldMove : void 0) != null ? _ref : ShouldMove.annealing;
      this.settings.BG_COLOR = (_ref1 = args != null ? args.bgColor : void 0) != null ? _ref1 : "#1e1e1e";
      this.settings.BOUNDS_COLOR = (_ref2 = args != null ? args.boundsColor : void 0) != null ? _ref2 : "#00ff00";
      this.settings.CANVAS_SIZE = (_ref3 = args != null ? args.canvasSize : void 0) != null ? _ref3 : 50;
      this.settings.CONFIDENCE_THRESHOLD = (_ref4 = args != null ? args.confidenceThreshold : void 0) != null ? _ref4 : 30;
      this.settings.INITIAL_POLYS = (_ref5 = args != null ? args.initialPolys : void 0) != null ? _ref5 : 60;
      this.settings.MAX_CONFIDENCE_THRESHOLD = (_ref6 = args != null ? args.maxConfidenceThreshold : void 0) != null ? _ref6 : 35;
      this.settings.MAX_GENERATIONS = (_ref7 = args != null ? args.maxGenerations : void 0) != null ? _ref7 : 6000;
      this.settings.MAX_GENS_WITHOUT_IMPROVEMENT = (_ref8 = args != null ? args.maxGensWithoutImprovement : void 0) != null ? _ref8 : 1000;
      this.settings.MAX_POLYS = (_ref9 = args != null ? args.maxPolys : void 0) != null ? _ref9 : 1000;
      this.settings.MAX_POLYS_PER_GENERATION = (_ref10 = args != null ? args.maxPolysPerGeneration : void 0) != null ? _ref10 : 2;
      this.settings.OUTPUT_SIZE = (_ref11 = args != null ? args.outputSize : void 0) != null ? _ref11 : 100;
      this.settings.QUAD_ADD_STDDEV = (_ref12 = args != null ? args.quadAddStddev : void 0) != null ? _ref12 : 0.5;
      this.settings.QUAD_INIT_STDDEV = (_ref13 = args != null ? args.quadInitStddev : void 0) != null ? _ref13 : 0.2;
      this.tickCount = 0;
      this.ticking = true;
      this.reset();
      return this.tick();
    };

    Pareidoloop.prototype.stop = function() {
      return this.ticking = false;
    };

    Pareidoloop.prototype.reset = function() {
      this.initCanvas(this.canvasA, this.settings.CANVAS_SIZE);
      this.clearCanvas(this.canvasA);
      this.initCanvas(this.canvasB, this.settings.CANVAS_SIZE);
      this.clearCanvas(this.canvasB);
      this.initCanvas(this.canvasOut, this.settings.OUTPUT_SIZE);
      this.clearCanvas(this.canvasOut);
      this.scoreA.innerHTML = "";
      this.scoreB.innerHTML = "";
      this.faceA = new Face([]);
      this.faceB = null;
      this.seedCount = this.genCount = 0;
      this.lastImprovedGen = 0;
      return this.seeding = true;
    };

    Pareidoloop.prototype.initCanvas = function(canvas, size) {
      canvas.width = canvas.height = size;
      return canvas.getContext("2d").setTransform(1, 0, 0, 1, size / 2, size / 2);
    };

    Pareidoloop.prototype.clearCanvas = function(canvas) {
      var ctx;
      ctx = canvas.getContext("2d");
      ctx.fillStyle = this.settings.BG_COLOR;
      ctx.globalAlpha = 1;
      return ctx.fillRect(-canvas.width / 2, -canvas.height / 2, canvas.width, canvas.height);
    };

    Pareidoloop.prototype.getSeedFace = function() {
      var i;
      return new Face((function() {
        var _i, _ref, _results;
        _results = [];
        for (i = _i = 0, _ref = this.settings.INITIAL_POLYS; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          _results.push(new Quad([rnd(0, this.settings.CANVAS_SIZE / 10), rnd(-this.settings.CANVAS_SIZE / 8, this.settings.CANVAS_SIZE / 6)], rnd(this.settings.CANVAS_SIZE / 3, this.settings.CANVAS_SIZE / 7.5), rnd(0.02, 0.2), this.settings.QUAD_INIT_STDDEV));
        }
        return _results;
      }).call(this));
    };

    Pareidoloop.prototype.tick = function() {
      var fitness, fitnessScore, outCtx, outScale, outputImg;
      if (!this.ticking) {
        return;
      }
      if (this.seeding) {
        this.faceB = this.getSeedFace();
        this.seedCount++;
        this.scoreB.innerHTML = "Searching for seed face: " + this.seedCount;
      } else {
        this.faceB = this.faceA.produceChild();
        this.genCount++;
        this.scoreB.innerHTML = "Generation: " + this.genCount;
      }
      this.clearCanvas(this.canvasB);
      this.faceB.draw(this.canvasB.getContext("2d"));
      fitness = this.faceB.measureFitness(this.canvasB);
      fitnessScore = -999;
      if (fitness.numFaces === 1 && fitness.bounds.width > this.settings.CANVAS_SIZE / 2 && fitness.bounds.height > this.settings.CANVAS_SIZE / 2) {
        fitnessScore = fitness.confidence;
        if (this.shouldMove(fitnessScore, this.faceA.fitness)) {
          this.clearCanvas(this.canvasA);
          this.faceA = this.faceB;
          this.faceA.draw(this.canvasA.getContext("2d"));
          this.faceA.drawBounds(this.canvasA.getContext("2d"));
          this.scoreA.innerHTML = "Fitness: " + (fitnessScore.toFixed(6)) + ", Generation " + this.genCount;
          this.seeding = false;
          this.lastImprovedGen = this.genCount;
        }
      }
      if (this.genCount >= this.settings.MAX_GENERATIONS || (this.genCount - this.lastImprovedGen) > this.settings.MAX_GENS_WITHOUT_IMPROVEMENT || fitnessScore > this.settings.CONFIDENCE_THRESHOLD) {
        outCtx = this.canvasOut.getContext("2d");
        outScale = this.settings.OUTPUT_SIZE / this.settings.CANVAS_SIZE;
        outCtx.scale(outScale, outScale);
        this.faceA.draw(outCtx);
        outputImg = document.createElement("img");
        outputImg.src = this.canvasOut.toDataURL();
        if (this.outputCallback) {
          this.outputCallback(outputImg, this.faceA.fitness);
        }
        this.reset();
      }
      return setTimeout($.proxy(this.tick, this), 1);
    };

    return Pareidoloop;

  })();

  Face = (function(_super) {

    __extends(Face, _super);

    function Face(quads) {
      this.quads = quads;
      this.fitness = -999;
      this.bounds = {
        x: 0,
        y: 0,
        width: this.settings.CANVAS_SIZE,
        height: this.settings.CANVAS_SIZE
      };
    }

    Face.prototype.produceChild = function() {
      var childQuads, fitnessDiff, i, newAlpha, newOrigin, newScale, victimIdx;
      childQuads = (function() {
        var _i, _ref, _results;
        _results = [];
        for (i = _i = 0, _ref = this.quads.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          _results.push(this.quads[i]);
        }
        return _results;
      }).call(this);
      if (Math.random() * this.settings.MAX_POLYS < childQuads.length) {
        victimIdx = Math.floor(Math.random() * childQuads.length);
        childQuads.splice(victimIdx, 1);
      } else {
        newOrigin = [rnd(this.bounds.x + this.bounds.width / 2, this.bounds.width / 4), rnd(this.bounds.y + this.bounds.height / 2, this.bounds.height / 4)];
        fitnessDiff = Math.sqrt(Math.max(0, this.settings.MAX_CONFIDENCE_THRESHOLD - this.fitness));
        newScale = rnd(0.01 + fitnessDiff, 0.02 * this.bounds.width);
        newAlpha = Math.min(1, Math.max(-1, rnd(0, 0.01 + 0.05 * fitnessDiff)));
        childQuads[childQuads.length] = new Quad(newOrigin, newScale, newAlpha, this.settings.QUAD_ADD_STDDEV);
      }
      return new Face(childQuads);
    };

    Face.prototype.draw = function(ctx) {
      var i, _i, _ref, _results;
      _results = [];
      for (i = _i = 0, _ref = this.quads.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        _results.push(this.quads[i].draw(ctx));
      }
      return _results;
    };

    Face.prototype.drawBounds = function(ctx) {
      ctx.globalAlpha = 1;
      ctx.strokeStyle = this.settings.BOUNDS_COLOR;
      return ctx.strokeRect(this.bounds.x, this.bounds.y, this.bounds.width, this.bounds.height);
    };

    Face.prototype.measureFitness = function(canvas) {
      var comp;
      comp = ccv.detect_objects({
        "canvas": canvas,
        "cascade": cascade,
        "interval": 5,
        "min_neighbors": 1
      });
      if (comp.length === 1) {
        this.bounds.x = comp[0].x - canvas.width / 2;
        this.bounds.y = comp[0].y - canvas.height / 2;
        this.bounds.width = comp[0].width;
        this.bounds.height = comp[0].height;
        this.fitness = comp[0].confidence;
      }
      return {
        numFaces: comp.length,
        bounds: this.bounds,
        confidence: this.fitness
      };
    };

    return Face;

  })(Pareidoloop);

}).call(this);
